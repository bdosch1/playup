package com.plcoding.ktorandoidchat.data.remote
//organizes chat and debug string
class ChatSocketServiceImp (

  private val_client: HttpClient
  ): ChatSocketService (
  private var socket : WebSocketSession ? - null
  override suspend fun initSession(username:string) Resource<Unit> {
  return try {
   socket = client.webSocketSession  { 
    url(ChatSocket.Endpoints.ChatSocket.URL) 
    if (socket?.isActive == true){
      Resource.Success(Unit)
      } else Resource.Error( message: couldn't establish connection)
      //editor note need to put code from Message with IP
    url(urlString"") //enables continous connection with http request
  } catch(e: Exception) {
    e.printStackTrace()
    Resource.Error(message e.localizedmessage ?: "Unkown Error?")
 }
  
  override suspend fun sendMessage(message:String) {
    try {
     socket?.send(Frame.text(message)) //connection to server try and catch
    }
     catch (e: Exception) {
  override fun observeMessage(): Flow<Message> { //triggers everytime we get a message
    return try {
     socket?.incoming
      ?.recieveasFlow()
      ?.filter{ it is Frame.text }
      ?.map { it:Frame
        val json = (it as? Frame.text)?.readText() ? : ""
        val messageDto = Json.decodeFromString<MessageDto>(json)
        messageDto.toMessage()
        } ?= flow {}
    }
    catch(e: Exception) {
      e.printStackTrace()
      flow {}
    override suspend fun closeSession() {
     socket.close
     }
     
     }
